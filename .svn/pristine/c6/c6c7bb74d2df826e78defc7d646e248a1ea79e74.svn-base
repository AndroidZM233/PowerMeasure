package speedata.com.powermeasure.activity;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ListView;

import com.alibaba.fastjson.JSON;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;

import java.util.List;

import common.adapter.CommonAdapter;
import common.adapter.ViewHolder;
import common.base.App;
import common.base.act.FragActBase;
import common.bean.AppConst;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.view.CustomTitlebar;
import common.webserice.WebService;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.InspListClass;
import speedata.com.powermeasure.constant.Constants;
import speedata.com.powermeasure.model.HttpModel;
import speedata.com.powermeasure.model.WebModel;

@EActivity(R.layout.activity_inspect)
public class InspectAct extends FragActBase {
    @ViewById
    CustomTitlebar titlebar;
    @ViewById
    ListView lv_insp;
    private List<InspListClass.INSPLISTBean> insp_list;
    private static final int GET_INSPLIST_SUCCESS = 0;  //拿list成功

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case GET_INSPLIST_SUCCESS:
                    CommonAdapter commonAdapter = new CommonAdapter(mContext, insp_list,
                            R.layout.adapter_insp) {
                        @Override
                        public void convert(ViewHolder helper, Object item, int position) {
                            helper.setText(R.id.tv_insp_number, insp_list.get(position)
                                    .getINSP_NO());
                            helper.setText(R.id.tv_insp_name, insp_list.get(position)
                                    .getINSP_NAME());
                            helper.setText(R.id.tv_insp_time, insp_list.get(position)
                                    .getINSP_MUST_TIME());
                        }
                    };
                    lv_insp.setAdapter(commonAdapter);
                    lv_insp.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            setXml("INSP_NO",insp_list.get(position).getINSP_NO());
                            setXml("INSP_NAME",insp_list.get(position).getINSP_NAME());
                            setXml("INSP_MUST_TIME",insp_list.get(position).getINSP_MUST_TIME());
                            openAct(InspSecondAct.class,true);
                        }
                    });
                    break;
            }
        }
    };

    @AfterViews
    protected void main() {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        App.getInstance().addActivity(InspectAct.this);
        initTitlebar();
        setSwipeEnable(false);
        DoGetInspList();
    }
    //待办查询点查询
    private void DoGetInspList() {
        showLoading("查询中...");
        WebModel.getInstance().getInspList(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                callWebService="[{\"RT_F\":\"1\",\"RT_D\":\"\",\"INSP_LIST\":[{\"INSP_NO\":\"12080001\",\"INSP_NAME\":\"上料装置\",\n" +
                        "\"INSP_MUST_TIME\":\"2016-08-02 10：00\"}]}]";
                List<InspListClass> inspListClasses = JSON.parseArray(
                        callWebService, InspListClass.class);
                InspListClass inspListClass = inspListClasses.get(0);
                String rt_f = inspListClass.getRT_F();
                if (rt_f.equals("1")) {
                    insp_list = inspListClass.getINSP_LIST();
                    Message message = new Message();
                    message.what = GET_INSPLIST_SUCCESS;
                    handler.sendMessage(message);
                } else {
                    final String rt_desc = inspListClass.getRT_D();
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            showToast("查询失败！" + rt_desc);
                        }
                    });
                    finish();
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },getXml("0PROC_CODE", ""),getXml("OPER_NO", ""));
    }

    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    protected void initTitlebar() {
        titlebar.setTitlebarStyle(CustomTitlebar.TITLEBAR_STYLE_NORMAL);
        titlebar.setAttrs(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        }, "巡查任务", null);
    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }
}
