package speedata.com.powermeasure.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.android.uhflibs.r2000_native;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;
import org.kobjects.util.Util;

import java.util.ArrayList;
import java.util.List;

import common.base.App;
import common.base.IBaseScanFragment;
import common.base.act.FragActBase;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.utils.ScanUtil;
import common.utils.TimeFormatePresenter;
import common.view.CustomTitlebar;
import common.webserice.WebService;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.InspScanClass;
import speedata.com.powermeasure.bean.LoginOutClass;
import speedata.com.powermeasure.bean.ResultList;
import speedata.com.powermeasure.constant.Constants;
import speedata.com.powermeasure.model.HttpModel;
import speedata.com.powermeasure.model.WebModel;

@EActivity(R.layout.activity_insp_second)
public class InspSecondAct extends FragActBase {
    private static final int INSP_SCAN_SUCCESS = 0;
    @ViewById
    CustomTitlebar titlebar;
    @ViewById
    TextView tv_inspSecond_time;
    @ViewById
    TextView tv_inspSecond_name;
    @ViewById
    TextView tv_inspSecond_nowtime;
    @ViewById
    Button btn_inspSecond_fankui;
    @ViewById
    Button btn_inspSecond_trouble;
    @ViewById
    CheckBox cb_inspSecond_1;
    @ViewById
    CheckBox cb_inspSecond_2;
    @ViewById
    CheckBox cb_inspSecond_3;
    private List<InspScanClass.CONTLISTBean> cont_list;

    Handler handler=new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what){
                case INSP_SCAN_SUCCESS:
                    tv_inspSecond_name.setText(inspScanClass.getINSP_NAME());
                    tv_inspSecond_time.setText(inspScanClass.getINSP_MUST_TIME());
                    tv_inspSecond_nowtime.setText(inspScanClass
                            .getINSP_ACTL_TIME());
                    setXml("INSP_NO",inspScanClass.getINSP_NO());
                    checkBoxList = new ArrayList<CheckBox>();
                    checkBoxList.add(cb_inspSecond_1);
                    checkBoxList.add(cb_inspSecond_2);
                    checkBoxList.add(cb_inspSecond_3);
                    for (int i = 0; i < cont_list.size(); i++) {
                        checkBoxList.get(i).setVisibility(View.VISIBLE);
                        checkBoxList.get(i).setText(cont_list.get(i).getCONT_NAME());
                    }
                    break;
            }
        }
    };
    private List<CheckBox> checkBoxList;
    private InspScanClass inspScanClass;

    @AfterViews
    protected void main() {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        App.getInstance().addActivity(InspSecondAct.this);
        initTitlebar();
        //突破锁屏
        KeyguardManager keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
        KeyguardManager.KeyguardLock keyguardLock = keyguardManager.newKeyguardLock("");
        keyguardLock.disableKeyguard();
        setSwipeEnable(false);
        if (initR2000()) return;
        SearchTagDialog searchTagDialog=new SearchTagDialog(mContext);
        searchTagDialog.setTitle("搜索RFID卡的ID");
        searchTagDialog.show();
    }

    private boolean initR2000() {
        native_method = new r2000_native();
        if (native_method.OpenDev() != 0) {
            new AlertDialog.Builder(this).setTitle(R.string.DIA_ALERT).setMessage(R.string.DEV_OPEN_ERR).setPositiveButton(R.string.DIA_CHECK, new DialogInterface.OnClickListener() {

                @Override
                public void onClick(DialogInterface dialog, int which) {
                    // TODO Auto-generated method stub
                    finish();
                }
            }).show();
            return true;
        }
        init_progress++;

        pM = (PowerManager) getSystemService(POWER_SERVICE);
        if (pM != null) {
            wK = pM.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK
                    | PowerManager.ON_AFTER_RELEASE, "lock3992");
            if (wK != null) {
                wK.acquire();
                init_progress++;
            }
        }

        if (init_progress == 1) {
            Log.w("3992_6C", "wake lock init failed");
        }
        return false;
    }

    //反馈
    @Click
    void btn_inspSecond_fankui(){
        showLoading("反馈中...");
        final List<ResultList> lists=new ArrayList<ResultList>();
        ResultList resultList=new ResultList();
        for (int i = 0; i < cont_list.size(); i++) {
            boolean checked = checkBoxList.get(i).isChecked();
            if (checked){
                resultList.setRESULT_CODE("01");
            }else {
                resultList.setRESULT_CODE("02");
            }
            resultList.setCONT_NO(cont_list.get(i).getCONT_NO());
            lists.add(resultList);
        }

        WebModel.getInstance().inspFeedback(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                LoginOutClass inspFeedBack=JSON.parseObject(callWebService,
                        LoginOutClass.class);
                String rt_f = inspFeedBack.getRT_F();
                if (rt_f.equals("1")){
                    showToast("反馈成功!");
                }else {
                    showToast("反馈失败，"+inspFeedBack.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },getXml("INSP_NO", "1"),lists);
    }

    //异常上报
    @Click
    void btn_inspSecond_trouble(){
        openAct(InspThirdAct.class,true);
    }
    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    protected void initTitlebar() {
        titlebar.setTitlebarStyle(CustomTitlebar.TITLEBAR_STYLE_NORMAL);
        titlebar.setAttrs(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        }, "巡检工单", null);
    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }

    //扫描RFID
    private void inspScan(String barcode) {
        showToast("查询中...");
        WebModel.getInstance().inspScan(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<InspScanClass> inspScanClasses = JSON.parseArray(callWebService,
                        InspScanClass.class);
                inspScanClass = inspScanClasses.get(0);
                String rt_f = inspScanClass.getRT_F();
                if (rt_f.equals("1")){
                    cont_list = inspScanClass.getCONT_LIST();
                    Message message=new Message();
                    message.what=INSP_SCAN_SUCCESS;
                    handler.sendMessage(message);
                }else {
                    showToast(inspScanClass.getRT_D());
                    finish();
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                    }
                });
            }
        },barcode);
    }


    @Override
    protected void onResume() {
        super.onResume();
        native_method.resumeOpenDev();
    }

    @Override
    protected void onPause() {
        super.onPause();
        native_method.postCloseDev();
    }

    private int init_progress = 0;
    private PowerManager pM = null;
    private PowerManager.WakeLock wK = null;
    @Override
    public void onDestroy() {

        super.onDestroy();
        Log.d("r2000_kt45", "called ondestory");
        switch (init_progress) {
            case 2:
                wK.release();
            case 1:
                native_method.CloseDev();
            case 0:
            default:
                init_progress = 0;
        }
    }

    private r2000_native native_method;
    private String current_tag_epc = null;
    class SearchTagDialog extends Dialog implements
            android.view.View.OnClickListener, AdapterView.OnItemClickListener {

        private Button Cancle;
        private Button Action;
        private TextView Status;
        private ListView EpcList;
        private boolean inSearch = false;
        private List<EpcDataBase> firm = new ArrayList<EpcDataBase>();
        private Handler handler = null;
        private ArrayAdapter<EpcDataBase> adapter;
        private Context cont;
        private SoundPool soundPool;
        private int soundId;
        private long scant = 0;

        private CheckBox cbb;


        public SearchTagDialog(Context context) {
            super(context);
            // TODO Auto-generated constructor stub
            cont = context;
        }

        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.setreader);

            Cancle = (Button) findViewById(R.id.btn_search_cancle);
            Cancle.setOnClickListener(this);
            Action = (Button) findViewById(R.id.btn_search_action);
            Action.setOnClickListener(this);

            cbb = (CheckBox)findViewById(R.id.checkBox_beep);

            Status = (TextView) findViewById(R.id.textView_search_status);
            EpcList = (ListView) findViewById(R.id.listView_search_epclist);
            EpcList.setOnItemClickListener(this);

            soundPool = new SoundPool(2, AudioManager.STREAM_MUSIC, 0);
            if (soundPool == null) {
                Log.e("as3992", "Open sound failed");
            }
            soundId = soundPool.load("/system/media/audio/ui/VideoRecord.ogg", 0);
            Log.w("as3992_6C", "id is " + soundId);


            handler = new Handler() {
                @Override
                public void handleMessage(Message msg)
                {
                    super.handleMessage(msg);
                    if (msg.what == 1) {
                        scant++;
                        if(!cbb.isChecked())
                        {
                            if(scant % 50 == 0)
                            {
                                soundPool.play(soundId, 1, 1, 0, 0, 1);
                            }
                        }
                        ArrayList<r2000_native.Tag_Data> ks = (ArrayList<r2000_native.Tag_Data>)msg.obj;
                        String tmp[] = new String[ks.size()];
                        for(int i = 0; i < ks.size(); i++)
                        {
                            byte[] nq = ks.get(i).epc;
                            if(nq != null)
                            {
                                tmp[i] = new String();
                                for(int j = 0; j < nq.length; j++)
                                {
                                    tmp[i] += String.format("%02x ", nq[j]);
                                }
                            }
                        }
                        int i, j;
                        for (i = 0; i < tmp.length; i++) {
                            for (j = 0; j < firm.size(); j++) {
                                if (tmp[i].equals(firm.get(j).epc)) {
                                    firm.get(j).valid++;
                                    break;
                                }
                            }
                            if (j == firm.size()) {
                                firm.add(new EpcDataBase(tmp[i], 1));
                                if(cbb.isChecked())
                                {
                                    soundPool.play(soundId, 1, 1, 0, 0, 1);
                                }
                            }
                        }
                    }
                    adapter = new ArrayAdapter<InspSecondAct.SearchTagDialog.EpcDataBase>(
                            cont, android.R.layout.simple_list_item_1, firm);
                    EpcList.setAdapter(adapter);
                    Status.setText("Total: " + firm.size());
                }
            };

            native_method.reg_handler(handler);
        }




        @Override
        protected void onStop() {
            // TODO Auto-generated method stub
            Log.w("stop", "im stopping");
            if (inSearch) {
                native_method.inventory_stop();
                inSearch = false;
            }
            soundPool.release();
            super.onStop();
        }

        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
            if (v == Cancle) {
                soundPool.release();
                //**别忘记删除下面代码
                inspScan("3865899");
                //_______________
                dismiss();
            } else if (v == Action) {
                if (inSearch) {
                    inSearch = false;
                    this.setCancelable(true);
                    native_method.inventory_stop();
                    Action.setText(R.string.Start_Search_Btn);
                    Cancle.setEnabled(true);
                } else {
                    inSearch = true;
                    this.setCancelable(false);
                    scant = 0;
                    native_method.inventory_start();

                    Action.setText(R.string.Stop_Search_Btn);
                    Cancle.setEnabled(false);
                }
            }
        }

        class EpcDataBase {
            String epc;
            int valid;

            public EpcDataBase(String e, int v) {
                // TODO Auto-generated constructor stub
                epc = e;
                valid = v;
            }

            @Override
            public String toString() {
                return epc + "  ( " + valid + " )";
            }
        }

        @Override
        public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                                long arg3) {
            // TODO Auto-generated method stub
            EpcDataBase epcDataBase = firm.get(arg2);
            showToast(epcDataBase +"");
            inspScan(epcDataBase+"");
            dismiss();
        }
    }
}
