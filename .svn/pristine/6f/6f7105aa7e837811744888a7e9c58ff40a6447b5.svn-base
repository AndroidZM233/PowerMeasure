/*
 *
 * @author Echo
 * @created 2016.6.3
 * @email bairu.xu@speedatagroup.com
 * @version $version
 *
 */

package speedata.com.powermeasure.activity;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Parcelable;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;

import com.alibaba.fastjson.JSON;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import common.base.App;
import common.base.act.FragActBase;
import common.base.dialog.ToastUtils;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.utils.AbInnerUtil;
import common.utils.GetNetworkIpUtil;
import common.utils.StringUtil;
import common.webserice.WebService;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.LoginOutClass;
import speedata.com.powermeasure.bean.OperLoginClass;
import speedata.com.powermeasure.constant.Constants;
import speedata.com.powermeasure.model.WebModel;

import static common.utils.LogUtil.DEGUG_MODE;

@EActivity(R.layout.act_login)
public class LoginAct extends FragActBase {
    private static final String TAG = DEGUG_MODE ? "LoginAct" : LoginAct.class.getSimpleName();
    private static final boolean debug = true;
    @ViewById
    ImageView imageView7;
    @ViewById
    EditText telEt;
    @ViewById
    ImageView telEtClearbtn;
    @ViewById
    ImageView imageView8;
    @ViewById
    EditText pwdEt;
    @ViewById
    ImageView pwdEtClearbtn;
    @ViewById
    Button loginBtn;
    @ViewById
    Button exitBtn;


    private String userName;
    private String pwd;
    private String ip;


    @Click
    void loginBtn() {
//        new Thread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    URL url = new URL("http://218.247.237.138:8080/iom/ws/services/IOMWS?wsdl");
//                    HttpURLConnection urlConnection =
//                            (HttpURLConnection) url.openConnection();
//                    urlConnection.setRequestMethod("POST");
//                    urlConnection.setConnectTimeout(8000);
//                    InputStream inputStream = urlConnection.getInputStream();
//                    String session_value = urlConnection.getHeaderField("Set-Cookie");
//                    String sessionId = session_value.split(";")[0];
//                    System.out.println("sessionId = " + sessionId);
//                    byte[] byte_result = new byte[inputStream.available()];
//                    inputStream.read(byte_result);
//                    String result = new String(byte_result);
//                    System.out.println("返回结果 result = " + result);
//                    inputStream.close();
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        }).start();

        checkParms();
        openLogin();

    }

    private void openLogin() {
        showLoading("登录中...");
        userName = telEt.getText().toString();
        pwd = pwdEt.getText().toString();
        WebModel.getInstance().operLogin(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<OperLoginClass> operLoginClasses = JSON.parseArray(callWebService,
                        OperLoginClass.class);
                OperLoginClass operLoginClass = operLoginClasses.get(0);
                String rt_f = operLoginClass.getRT_F();
                if (rt_f.equals("1")) {
                    home_msg = operLoginClass.getRT_LIST();
                    for (int i = 0; i < home_msg.size(); i++) {
                        String proc_code = home_msg.get(i).getPROC_CODE();
                        int count = home_msg.get(i).getCOUNT();
                        setXml(i+"PROC_CODE",proc_code);
                        setXml(i+"COUNT",count+"");
                    }
                    setXml("RTLIST_SIZE",home_msg.size()+"");
                    setXml("OPER_NO",userName);
                    openAct(MainAct.class,true);
                    showToast(operLoginClass.getRT_D());
                } else {
                    showToast("登录失败，" + operLoginClass.getRT_D());
                }
                hideLoading();

            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },userName,pwd,ip,"8B2A6566368376E8C28B3CACD761FC44");
    }

    private void loginOut() {
        showLoading("登出中...");
        WebModel.getInstance().loginOut(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<LoginOutClass> loginOutClass = JSON.parseArray(callWebService,
                        LoginOutClass.class);
                String rt_f = loginOutClass.get(0).getRT_F();
                if (rt_f.equals("1")) {
                    showToast(loginOutClass.get(0).getRT_D());
                    App.getInstance().exit();
                } else {
                    showToast(loginOutClass.get(0).getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        }, telEt.getText().toString(),"1");
    }


    //登出
    @Click
    void exitBtn() {
        loginOut();
    }

    @AfterViews
    protected void main() {
        setSwipeEnable(false);
        setClearBtnListener(telEt, telEtClearbtn);
        setClearBtnListener(pwdEt, pwdEtClearbtn);
        telEt.setText("CW_DEVELOP");
        pwdEt.setText("0000aaaa");
        ip = GetNetworkIpUtil.getLocalIpAddress(mContext);
    }


    @Override
    protected void onResume() {
        super.onResume();
    }


    public boolean checkParms(String... parms) {
        if (parms != null && parms.length == 2) {
            if (StringUtil.isBlank(parms[0])) {
                ToastUtils.showShort("用户名不能为空");
                return false;
            }
            if (StringUtil.isBlank(parms[1])) {
                ToastUtils.showShort("密码为空");
                return false;
            }
            return true;
        } else {
            return false;
        }
    }


    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    protected void initTitlebar() {

    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }
}

