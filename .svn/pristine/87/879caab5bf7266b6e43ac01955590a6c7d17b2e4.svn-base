package speedata.com.powermeasure.activity;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.text.format.DateFormat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import common.base.App;
import common.base.act.FragActBase;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.view.CustomTitlebar;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.AlKnlgClass;
import speedata.com.powermeasure.bean.LoginOutClass;
import speedata.com.powermeasure.model.HttpModel;
import speedata.com.powermeasure.model.WebModel;

@EActivity(R.layout.activity_alarm_third)
public class AlarmThirdAct extends FragActBase {
    private static final int AL_KNLG_SUCCESS = 0;
    @ViewById
    CustomTitlebar titlebar;
    @ViewById
    EditText et_alSecond_beizhu;
    @ViewById
    EditText et_althird_repair;
    @ViewById
    Button btn_althird_fankui;
    @ViewById
    Button btn_althird_postpone;
    @ViewById
    Button btn_althird_toTrouble;
    @ViewById
    CheckBox cb_alSecond_cause1;
    @ViewById
    CheckBox cb_alSecond_cause2;
    @ViewById
    CheckBox cb_alSecond_cause3;
    @ViewById
    CheckBox cb_alSecond_deal1;
    @ViewById
    CheckBox cb_alSecond_deal2;
    @ViewById
    CheckBox cb_alSecond_deal3;
    private List<AlKnlgClass.REALCAUSELISTBean> real_cause_list;
    private List<AlKnlgClass.REALDEALLISTBean> real_deal_list;
    private List<CheckBox> causeLists;
    private List<CheckBox> dealLists;

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case AL_KNLG_SUCCESS:
                    //显示实际原因选项
                    for (int i = 0; i < real_cause_list.size(); i++) {
                        causeLists.get(i).setVisibility(View.VISIBLE);
                        causeLists.get(i).setText(real_cause_list.get(i)
                                .getREAL_CAUSE_NAME());
                    }
                    //显示实际处理方法选项
                    for (int j = 0; j < real_deal_list.size(); j++) {
                        dealLists.get(j).setVisibility(View.VISIBLE);
                        dealLists.get(j).setText(real_deal_list.get(j)
                                .getDEAL_METHOD());
                    }
                    break;
            }
        }
    };

    @AfterViews
    protected void main() {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        App.getInstance().addActivity(AlarmThirdAct.this);
        setSwipeEnable(false);
        initTitlebar();
        initDatas();
        AlKnlg();
    }

    private void initDatas() {
        causeLists = new ArrayList<CheckBox>();
        dealLists = new ArrayList<CheckBox>();
        initTitlebar();
        causeLists.add(cb_alSecond_cause1);
        causeLists.add(cb_alSecond_cause2);
        causeLists.add(cb_alSecond_cause3);
        dealLists.add(cb_alSecond_deal1);
        dealLists.add(cb_alSecond_deal2);
        dealLists.add(cb_alSecond_deal3);
    }

    //反馈
    @Click
    void btn_alSecond_fankui(){
        showLoading("反馈中...");
        String REAL_CAUSE="";
        String DEAL_METHOD_CODE="";
        for (int i = 0; i < real_cause_list.size(); i++) {
            if (causeLists.get(i).isChecked()){
                REAL_CAUSE=real_cause_list.get(i).getREAL_CAUSE();
            }
        }
        for (int j = 0; j < real_deal_list.size(); j++) {
            if (dealLists.get(j).isChecked()){
                DEAL_METHOD_CODE=real_deal_list.get(j).getDEAL_METHOD_CODE();
            }
        }
        final String finalREAL_CAUSE = REAL_CAUSE;
        final String finalDEAL_METHOD_CODE = DEAL_METHOD_CODE;
        WebModel.getInstance().maintFeedback(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<LoginOutClass> loginOutClasses = JSON.parseArray(callWebService,
                        LoginOutClass.class);
                LoginOutClass maintFeedback = loginOutClasses.get(0);
                String rt_f = maintFeedback.getRT_F();
                if (rt_f.equals("1")){
                    showToast("反馈成功！");
                }else {
                    showToast(maintFeedback.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },getXml("3ORDER_NO","1"), finalREAL_CAUSE, finalDEAL_METHOD_CODE,
                et_althird_repair.getText().toString(),
                et_alSecond_beizhu.getText().toString());
    }
    //延期申请
    @Click
    void btn_althird_postpone(){
        final Date date=new Date();
        AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
        final EditText edv=new EditText(mContext);
        builder.setView(edv);
        builder.setTitle("填写延长时间");
        builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String strTime = edv.getText().toString();
                if (TextUtils.isEmpty(strTime)){
                    showToast("延长时间不能为空");
                    return;
                }
                int time= Integer.parseInt(strTime);
                if (time==0){
                    showToast("延长时间不能为0");
                    return;
                }
                date.setTime(time);
                delayApply(date);
            }
        });
        builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        });
        AlertDialog alertDialog=builder.create();
        alertDialog.show();


    }

    @Click
    void btn_althird_toTrouble(){
        openAct(DiftApplyAct.class,true);
    }
    private void delayApply(Date date) {
        showLoading("申请中...");
        WebModel.getInstance().delayApply(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<LoginOutClass> loginOutClasses =
                        JSON.parseArray(callWebService, LoginOutClass.class);
                LoginOutClass delayApply = loginOutClasses.get(0);
                String rt_f = delayApply.getRT_F();
                if (rt_f.equals("1")){
                    showToast("反馈成功！");
                }else {
                    showToast(delayApply.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },getXml("3ORDER_NO","1"),date);
    }

    //反馈状态工单明细
    private void AlKnlg() {
        showLoading("查询中...");
        WebModel.getInstance().getAlarmKnlg(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<AlKnlgClass> alKnlgClasses = JSON.parseArray(callWebService,
                        AlKnlgClass.class);
                AlKnlgClass alKnlgClass = alKnlgClasses.get(0);
                String rt_f = alKnlgClass.getRT_F();
                if (rt_f.equals("1")) {
                    real_cause_list = alKnlgClass.getREAL_CAUSE_LIST();
                    real_deal_list = alKnlgClass.getREAL_DEAL_LIST();
                    Message message = new Message();
                    message.what = AL_KNLG_SUCCESS;
                    handler.sendMessage(message);
                } else {
                    showToast(alKnlgClass.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        }, getXml("3ORDER_NO", "IOM04"));
    }

    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    protected void initTitlebar() {
        titlebar.setTitlebarStyle(CustomTitlebar.TITLEBAR_STYLE_NORMAL);
        titlebar.setAttrs(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        }, "待维修状态工单", null);
    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }
}
