package com.hxht.testmqttclient;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.widget.RemoteViews;

import com.alibaba.fastjson.JSON;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import common.utils.AbInnerUtil;
import common.utils.SharedXmlUtil;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.activity.AlarmAct;
import speedata.com.powermeasure.bean.TuiSongClass;

import static common.utils.NetUtil.mContext;

/**
 * Created by 张明_ on 2016/11/3.
 */

public class MQTTService extends Service {

    private String host = "tcp://191.168.1.61:1883";
    private String userName = "admin";
    private String passWord = "password";
    private int i = 1;

    private Handler handler;

    private MqttClient client;

    private String myTopic = "test/topic";

    private MqttConnectOptions options;

    private ScheduledExecutorService scheduler;

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        init();

        handler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                if (msg.what == 1) {
                    String result = String.valueOf(msg.obj);
//                    result="[{DEPTNO:12101,ORDERNUM:6}]";
                    int deptno = 0;
                    int ordernum = 0;
                    try {
                        List<TuiSongClass> tuiSongClasses = JSON.parseArray(result, TuiSongClass.class);
                        TuiSongClass tuiSongClass = tuiSongClasses.get(0);
                        deptno = tuiSongClass.getDEPTNO();
                        ordernum = tuiSongClass.getORDERNUM();
                    } catch (Exception e) {
                        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
                        Notification notification = new Notification(R.drawable.tuisong, "Mqtt即时推送", System.currentTimeMillis());
                        notification.contentView = new RemoteViews("speedata.com.powermeasure", R.layout.activity_notification);
                        notification.contentView.setTextViewText(R.id.tv_desc, "json格式不正确");
                        notification.defaults = Notification.DEFAULT_SOUND;
                        notification.defaults = Notification.DEFAULT_VIBRATE;
                        long[] vibrate = {0,100,200,300};
                        notification.vibrate = vibrate ;

                        notification.flags = Notification.FLAG_AUTO_CANCEL;
                        Intent intent = new Intent();
                        intent.setClass(MQTTService.this, AbInnerUtil.parse(AlarmAct.class));
                        PendingIntent contentIntent = PendingIntent.getActivity(MQTTService.this, 0,
                                intent, 0);
                        notification.contentIntent = contentIntent;

                        manager.notify(i++, notification);
                        e.printStackTrace();
                    }
                    String dept_no1 = SharedXmlUtil.getInstance(mContext).read("DEPT_NO", "");
                    if (TextUtils.isEmpty(dept_no1)){
                        return;
                    }
                    int dept_no = Integer.parseInt(dept_no1);
                    if (dept_no != deptno) {

                    } else {
                        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
                        Notification notification = new Notification(R.drawable.tuisong, "Mqtt即时推送", System.currentTimeMillis());
                        notification.contentView = new RemoteViews("speedata.com.powermeasure", R.layout.activity_notification);
                        notification.contentView.setTextViewText(R.id.tv_desc, "您有" + ordernum + "条新的告警待处理");
//                    notification.contentView.setTextViewText(R.id.tv_desc, "您有新的告警待处理");
                        notification.defaults = Notification.DEFAULT_SOUND;
//                        notification.defaults |= Notification.DEFAULT_VIBRATE;
                        long[] vibrate = {0,2000,1000,1000,1000};
                        notification.vibrate = vibrate ;

                        notification.flags = Notification.FLAG_AUTO_CANCEL;
                        Intent intent = new Intent();
                        intent.setClass(MQTTService.this, AbInnerUtil.parse(AlarmAct.class));
                        PendingIntent contentIntent = PendingIntent.getActivity(MQTTService.this, 0,
                                intent, 0);
                        notification.contentIntent = contentIntent;

                        manager.notify(i++, notification);
                    }
                    }else if (msg.what == 2) {
                        System.out.println("连接成功");
//                    Toast.makeText(MainActivity.this, "连接成功", Toast.LENGTH_SHORT).show();
                        try {
                            client.subscribe(myTopic, 1);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (msg.what == 3) {
//                    Toast.makeText(MainActivity.this, "连接失败，系统正在重连", Toast.LENGTH_SHORT).show();
                        System.out.println("连接失败，系统正在重连");
                    }
                }
            }

            ;

            startReconnect();
        }

    private void startReconnect() {
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                if (!client.isConnected()) {
                    connect();
                }
            }
        }, 0 * 1000, 10 * 1000, TimeUnit.MILLISECONDS);
    }

    private void init() {
        try {
            //host为主机名，test为clientid即连接MQTT的客户端ID，一般以客户端唯一标识符表示，MemoryPersistence设置clientid的保存形式，默认为以内存保存
            client = new MqttClient(host, "test",
                    new MemoryPersistence());
            //MQTT的连接设置
            options = new MqttConnectOptions();
            //设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接
            options.setCleanSession(true);
            //设置连接的用户名
            options.setUserName(userName);
            //设置连接的密码
            options.setPassword(passWord.toCharArray());
            // 设置超时时间 单位为秒
            options.setConnectionTimeout(30);
            // 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制
            options.setKeepAliveInterval(5);
            //设置回调
            client.setCallback(new MqttCallback() {

                @Override
                public void connectionLost(Throwable cause) {
                    //连接丢失后，一般在这里面进行重连
                    System.out.println("connectionLost----------");
//                    startReconnect();
                }

                @Override
                public void deliveryComplete(IMqttDeliveryToken token) {
                    //publish后会执行到这里
                    System.out.println("deliveryComplete---------"
                            + token.isComplete());

                }

                @Override
                public void messageArrived(String topicName, MqttMessage message)
                        throws Exception {
                    //subscribe后得到的消息会执行到这里面
                    System.out.println("messageArrived----------");
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = message.toString();
                    handler.sendMessage(msg);
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void connect() {
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    client.connect(options);
                    Message msg = new Message();
                    msg.what = 2;
                    handler.sendMessage(msg);
                } catch (Exception e) {
                    e.printStackTrace();
                    Message msg = new Message();
                    msg.what = 3;
                    handler.sendMessage(msg);
                }
            }
        }).start();
    }


//    @Override
//    protected void onDestroy() {
//        super.onDestroy();
//        try {
//            scheduler.shutdown();
//            client.disconnect();
//        } catch (MqttException e) {
//            e.printStackTrace();
//        }
//    }
}
