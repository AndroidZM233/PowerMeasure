package speedata.com.powermeasure.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.android.uhflibs.r2000_native;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;
import org.kobjects.util.Util;

import java.util.ArrayList;
import java.util.List;

import common.base.App;
import common.base.IBaseScanFragment;
import common.base.act.FragActBase;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.utils.ScanUtil;
import common.utils.TimeFormatePresenter;
import common.view.CustomTitlebar;
import common.webserice.WebService;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.InspScanClass;
import speedata.com.powermeasure.bean.LoginOutClass;
import speedata.com.powermeasure.bean.ResultList;
import speedata.com.powermeasure.constant.Constants;
import speedata.com.powermeasure.model.HttpModel;
import speedata.com.powermeasure.model.WebModel;

@EActivity(R.layout.activity_insp_second)
public class InspSecondAct extends FragActBase {
    private static final int INSP_SCAN_SUCCESS = 0;
    @ViewById
    CustomTitlebar titlebar;
    @ViewById
    TextView tv_inspSecond_time;
    @ViewById
    TextView tv_inspSecond_name;
    @ViewById
    TextView tv_inspSecond_nowtime;
    @ViewById
    Button btn_inspSecond_fankui;
    @ViewById
    Button btn_inspSecond_trouble;
    @ViewById
    LinearLayout cb_linearLayout;
    private List<InspScanClass.RTLISTBean> cont_list;

    Handler handler=new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what){
                case INSP_SCAN_SUCCESS:
                    tv_inspSecond_name.setText(inspScanClass.getINSP_NAME());
                    tv_inspSecond_time.setText(inspScanClass.getINSP_MUST_TIME());
                    tv_inspSecond_nowtime.setText(inspScanClass
                            .getINSP_ACTL_TIME());
                    setXml("INSP_NO",inspScanClass.getINSP_NO());
                    checkBoxList = new ArrayList<CheckBox>();
                    for (int i = 0; i < cont_list.size(); i++) {
                        CheckBox checkBox=new CheckBox(mContext);
                        checkBox.setText(cont_list.get(i).getINSP_NAME());
                        cb_linearLayout.addView(checkBox);
                        checkBoxList.add(checkBox);
                    }
                    break;
            }
        }
    };
    private List<CheckBox> checkBoxList;
    private InspScanClass inspScanClass;

    @AfterViews
    protected void main() {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        App.getInstance().addActivity(InspSecondAct.this);
        initTitlebar();
        setSwipeEnable(false);
        inspScan(getXml("RFID","1"));
    }


    //反馈
    @Click
    void btn_inspSecond_fankui(){
        showLoading("反馈中...");
//        final List<ResultList> lists=new ArrayList<ResultList>();
        StringBuffer stringBuffer=new StringBuffer();
        for (int i = 0; i < cont_list.size(); i++) {
            boolean checked = checkBoxList.get(i).isChecked();
//            ResultList resultList=new ResultList();
            String insp_cont = cont_list.get(i).getINSP_CONT();
            stringBuffer.append(insp_cont+":");
            if (i==cont_list.size()-1){
                if (checked){
                    stringBuffer.append("01");
                }else {
                    stringBuffer.append("02");
                }
            }else {
                if (checked){
                    stringBuffer.append("01@");
//                resultList.setRESULT_CODE("01");
                }else {
                    stringBuffer.append("02@");
//                resultList.setRESULT_CODE("02");
                }
            }

//            resultList.setCONT_NO(cont_list.get(i).getINSP_CONT());
//            lists.add(resultList);
        }
//        String toJSONString = JSON.toJSONString(lists,false);

        WebModel.getInstance().inspFeedback(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<LoginOutClass> loginOutClasses = JSON.parseArray(callWebService,
                        LoginOutClass.class);
                LoginOutClass inspFeedBack = loginOutClasses.get(0);
                String rt_f = inspFeedBack.getRT_F();
                if (rt_f.equals("1")){
                    showToast("反馈成功!");
                    InspSecondAct.this.finish();
                }else {
                    showToast("反馈失败，"+inspFeedBack.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                    }
                });
            }
        },getXml("INSP_NO", "1"), String.valueOf(stringBuffer));
    }

    //异常上报
    @Click
    void btn_inspSecond_trouble(){
        openAct(InspThirdAct.class,true);
    }
    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    protected void initTitlebar() {
        titlebar.setTitlebarStyle(CustomTitlebar.TITLEBAR_STYLE_NORMAL);
        titlebar.setAttrs(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        }, "巡检工单", null);
    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }

    //扫描RFID
    private void inspScan(String barcode) {
        showLoading("查询中...");
        WebModel.getInstance().inspScan(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
                List<InspScanClass> inspScanClasses = JSON.parseArray(callWebService,
                        InspScanClass.class);
                inspScanClass = inspScanClasses.get(0);
                String rt_f = inspScanClass.getRT_F();
                if (rt_f.equals("1")){
                    cont_list = inspScanClass.getRT_LIST();
                    Message message=new Message();
                    message.what=INSP_SCAN_SUCCESS;
                    handler.sendMessage(message);
                }else {
                    showToast(inspScanClass.getRT_D());
                    finish();
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                        finish();
                    }
                });
            }
        },barcode);
    }

}
