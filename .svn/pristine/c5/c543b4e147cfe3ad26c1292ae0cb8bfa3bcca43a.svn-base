package speedata.com.powermeasure.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.android.uhflibs.r2000_native;

import org.androidannotations.annotations.AfterViews;
import org.androidannotations.annotations.Click;
import org.androidannotations.annotations.EActivity;
import org.androidannotations.annotations.ViewById;

import java.util.ArrayList;
import java.util.List;

import common.adapter.CommonAdapter;
import common.adapter.ViewHolder;
import common.base.App;
import common.base.act.FragActBase;
import common.bean.AppConst;
import common.event.ViewMessage;
import common.http.MResponse;
import common.http.MResponseListener;
import common.utils.PlaySoundPool;
import common.utils.TimeFormatePresenter;
import common.view.CustomTitlebar;
import common.webserice.WebService;
import speedata.com.powermeasure.R;
import speedata.com.powermeasure.bean.InspListClass;
import speedata.com.powermeasure.bean.OwnerControlClass;
import speedata.com.powermeasure.constant.Constants;
import speedata.com.powermeasure.model.HttpModel;
import speedata.com.powermeasure.model.WebModel;

@EActivity(R.layout.activity_inspect)
public class InspectAct extends FragActBase {
    private static final int OWNE_SUCCESS = 1;
    @ViewById
    CustomTitlebar titlebar;
    @ViewById
    ListView lv_insp;
    @ViewById
    TextView tv_insp_work_info;
    @ViewById
    Button btn_showInfo;
    private List<InspListClass.RTLISTBean> insp_list;
    private static final int GET_INSPLIST_SUCCESS = 0;  //拿list成功

    private Handler handler1 = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case GET_INSPLIST_SUCCESS:
                    CommonAdapter commonAdapter = new CommonAdapter(mContext, insp_list,
                            R.layout.adapter_insp) {
                        @Override
                        public void convert(ViewHolder helper, Object item, int position) {
                            helper.setText(R.id.tv_insp_number, insp_list.get(position)
                                    .getINSP_NO());
                            helper.setText(R.id.tv_insp_name, insp_list.get(position)
                                    .getINSP_NAME());
                            helper.setText(R.id.tv_insp_time, insp_list.get(position)
                                    .getINSP_MUST_TIME());
                            String insp_must_time = insp_list.get(position).getINSP_MUST_TIME();
                            if (!TextUtils.isEmpty(insp_must_time)) {
                                long strinTimeToLongTime = TimeFormatePresenter
                                        .getStrinTimeToLongTime(insp_must_time);
                                if (strinTimeToLongTime < 300000) {
                                    helper.setLLBackground(R.id.rl, "#EA0707");
                                } else {
                                    helper.setLLBackground(R.id.rl, "#ffffff");
                                }
                            } else {
                                helper.setLLBackground(R.id.rl, "#ffffff");
                            }

                        }
                    };
                    lv_insp.setAdapter(commonAdapter);
//                    lv_insp.setOnItemClickListener(new AdapterView.OnItemClickListener() {
//                        @Override
//                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//                            showLoading("跳转中...");
//                            setXml("INSP_NO",insp_list.get(position).getINSP_NO());
//                            setXml("INSP_NAME",insp_list.get(position).getINSP_NAME());
//                            setXml("INSP_MUST_TIME",insp_list.get(position).getINSP_MUST_TIME());
//                            openAct(InspSecondAct.class,true);
//                        }
//                    });
                    break;
                case OWNE_SUCCESS:
                    StringBuffer stringBuffer=new StringBuffer();
                    for (int i = 0; i < ownerRt_list.size(); i++) {
                        int count=i+1;
                        String DY="0"+count;
                        for (int j = 0; j < ownerRt_list.size(); j++) {
                            String dy = ownerRt_list.get(j).getDY();
                            if (dy.equals(DY)){
                                if (j==ownerRt_list.size()){
                                    stringBuffer.append(ownerRt_list.get(j).getMS());
                                }else {
                                    stringBuffer.append(ownerRt_list.get(j).getMS()+"\n\n");
                                }

                            }
                        }
                    }
                    tv_insp_work_info.setText(stringBuffer);
                    break;
            }
        }
    };
    private boolean isFirst = true;
    private List<OwnerControlClass.RTLISTBean> ownerRt_list;

    boolean isClick=false;
    @Click
    void btn_showInfo(){

        if (!isClick){
            tv_insp_work_info.setVisibility(View.GONE);
            isClick=true;
        }else {
            tv_insp_work_info.setVisibility(View.VISIBLE);
            isClick=false;
        }

    }
    @AfterViews
    protected void main() {
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
        App.getInstance().addActivity(InspectAct.this);
        initTitlebar();
        setSwipeEnable(false);
        showLoading("初始化中...");
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (initR2000()) return;
            }
        }).start();

//        native_method = new r2000_native();
        //突破锁屏
//        KeyguardManager keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
//        KeyguardManager.KeyguardLock keyguardLock = keyguardManager.newKeyguardLock("");
//        keyguardLock.disableKeyguard();
    }

    private void GetOwnerControlGKRunApply() {
        showLoading("查询中...");
        WebModel.getInstance().ownerControlGKRunApply(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                final String callWebService = String.valueOf(response.data);
                List<OwnerControlClass> ownerControlClasses
                        = JSON.parseArray(callWebService, OwnerControlClass.class);
                OwnerControlClass ownerControlClass = ownerControlClasses.get(0);
                String rt_f = ownerControlClass.getRT_F();
                if (rt_f.equals("1")){
                    ownerRt_list = ownerControlClass.getRT_LIST();
                    Message message=new Message();
                    message.what=OWNE_SUCCESS;
                    handler1.sendMessage(message);
                }else {
                    showToast(ownerControlClass.getRT_D());
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                        finish();
                    }
                });
            }
        },getXml("OPER_NO", ""),"IOM01");
    }

    private int init_progress = 0;
    private PowerManager pM = null;
    private PowerManager.WakeLock wK = null;

    @Override
    public void onDestroy() {

        super.onDestroy();
//        new Thread(new Runnable() {
//            @Override
//            public void run() {
        switch (init_progress) {
            case 2:
                wK.release();
            case 1:
                native_method.CloseDev();
            case 0:
            default:
                init_progress = 0;
        }
//            }
//        }).start();


    }

    private boolean initR2000() {
        native_method = new r2000_native();
        if (native_method.OpenDev() != 0) {
            new AlertDialog.Builder(this).setTitle(R.string.DIA_ALERT).setMessage(R.string.DEV_OPEN_ERR).setPositiveButton(R.string.DIA_CHECK, new DialogInterface.OnClickListener() {

                @Override
                public void onClick(DialogInterface dialog, int which) {
                    // TODO Auto-generated method stub
                    finish();
                }
            }).show();
            return true;
        }
        init_progress++;

        pM = (PowerManager) getSystemService(POWER_SERVICE);
        if (pM != null) {
            wK = pM.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK
                    | PowerManager.ON_AFTER_RELEASE, "lock3992");
            if (wK != null) {
                wK.acquire();
                init_progress++;
            }
        }

        if (init_progress == 1) {
            Log.w("3992_6C", "wake lock init failed");
        }
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                hideLoading();
            }
        });
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();
        DoGetInspList();
        GetOwnerControlGKRunApply();
        if (isFirst) {
            isFirst = false;
        } else {
            native_method.resumeOpenDev();
        }

    }

    @Override
    protected void onPause() {
        super.onPause();
//        native_method.postCloseDev();
    }

    //待办查询点查询
    private void DoGetInspList() {
        showLoading("查询中...");
        WebModel.getInstance().getInspList(new MResponseListener() {
            @Override
            public void onSuccess(MResponse response) {
                String callWebService = String.valueOf(response.data);
//                callWebService = "[{\"RT_F\":\"1\",\"RT_D\":\"\",\"RT_LIST\":[{\"INSP_NO\":\"12080001\",\"INSP_NAME\":\"上料装置\",\n" +
//                        "\"INSP_MUST_TIME\":\"2016-08-02 10：00\"}]}]";
                List<InspListClass> inspListClasses = JSON.parseArray(
                        callWebService, InspListClass.class);
                InspListClass inspListClass = inspListClasses.get(0);
                String rt_f = inspListClass.getRT_F();
                if (rt_f.equals("1")) {
                    insp_list = inspListClass.getRT_LIST();
                    Message message = new Message();
                    message.what = GET_INSPLIST_SUCCESS;
                    handler1.sendMessage(message);
                } else {
                    final String rt_desc = inspListClass.getRT_D();
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            showToast("查询失败！" + rt_desc);
                        }
                    });
                    finish();
                }
                hideLoading();
            }

            @Override
            public void onError(final MResponse response) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (response.msg != null) {
                            showToast(response.msg.toString());
                        } else {
                            showToast("出错了！");
                        }
                        hideLoading();
                        finish();
                    }
                });
            }
        }, "IOM01", getXml("OPER_NO", ""));
    }

    @Override
    protected Context regieterBaiduBaseCount() {
        return null;
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        InspectAct.this.finish();
    }

    @Override
    protected void initTitlebar() {
        titlebar.setTitlebarStyle(CustomTitlebar.TITLEBAR_STYLE_NORMAL);
        titlebar.setAttrs(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        }, "巡查任务", null);
    }

    @Override
    public void onEventMainThread(ViewMessage viewMessage) {

    }


    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_ENTER) {
            PlaySoundPool.getPlaySoundPool(mContext).playButton();
            native_method.set_freq_region(2);
            native_method.set_antenna_power(0);
            native_method.reg_handler(handler);
            native_method.inventory_start();
            return true;
        }else if (keyCode==KeyEvent.KEYCODE_BACK&&event.getRepeatCount()==0){
            InspectAct.this.finish();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    List<EpcDataBase> firm = new ArrayList<EpcDataBase>();
    long scant = 0;
    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.what == 1) {
                scant++;
                ArrayList<r2000_native.Tag_Data> ks = (ArrayList<r2000_native.Tag_Data>) msg.obj;
                String tmp[] = new String[ks.size()];

                if (ks.size() != 0) {
                    native_method.inventory_stop();
                }

                for (int i = 0; i < ks.size(); i++) {
                    byte[] nq = ks.get(i).epc;
                    if (nq != null) {
                        tmp[i] = new String();
                        for (int j = 0; j < nq.length; j++) {
                            tmp[i] += String.format("%02x ", nq[j]);
                        }
                    }
                }
                int i, j;
                for (i = 0; i < tmp.length; i++) {
                    for (j = 0; j < firm.size(); j++) {
                        if (tmp[i].equals(firm.get(j).epc)) {
                            firm.get(j).valid++;
                            break;
                        }
                    }
                    if (j == firm.size()) {
                        firm.add(new EpcDataBase(tmp[i], 1));
                    }
                }
            }
            if (firm.size() == 1) {
                String rfid = String.valueOf(firm.get(0).epc);
                setXml("RFID", rfid);
                PlaySoundPool.getPlaySoundPool(mContext).playLaser();
                openAct(InspSecondAct.class, true);
            } else {
                showToast("请贴紧您要扫描的标签,重新开始扫描");
                PlaySoundPool.getPlaySoundPool(mContext).playError();
            }
            firm.clear();

        }
    };

    class EpcDataBase {
        String epc;
        int valid;

        public EpcDataBase(String e, int v) {
            // TODO Auto-generated constructor stub
            epc = e;
            valid = v;
        }

        @Override
        public String toString() {
            return epc + "  ( " + valid + " )";
        }
    }

    private r2000_native native_method;
}
